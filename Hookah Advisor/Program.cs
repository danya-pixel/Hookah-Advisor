using System;
using System.Collections.Generic;
using System.Linq;
using Hookah_Advisor.Parsers;
using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;
using Hookah_Advisor.Repositories;
using Hookah_Advisor.Repository_Interfaces;
using Telegram.Bot.Types.Enums;


namespace Hookah_Advisor
{
    class Program
    {
        static ITelegramBotClient _botClient;
        private static readonly UserRepository UserRepository = new(new UserParser());
        private static readonly TobaccoRepository TobaccoRepository = new(new TobaccoParser());
        private const string ButtonSearch = "–ü–æ–∏—Å–∫";
        private const string ButtonRecommendations = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏";
        private const string ButtonSmokeLater = "–ü–æ–∫—É—Ä–∏—Ç—å –ø–æ–∑–∂–µ";
        private const string ButtonHistory = "–ò—Å—Ç–æ—Ä–∏—è";
        private static readonly List<string> YesOrNoKeyboard = new() {"–î–∞", "–ù–µ—Ç"};

        static void Main()
        {
            _botClient = new TelegramBotClient(BotSettings.Token);

            var me = _botClient.GetMeAsync().Result;
            Console.WriteLine(
                $"Hello, World! I am user {me.Id} and my name is {me.FirstName}."
            );

            _botClient.OnMessage += BotOnMessage;
            _botClient.OnCallbackQuery += BotOnCallbackQueryReceived;
            _botClient.StartReceiving();

            Console.WriteLine("Press any key to exit");
            Console.ReadKey();

            _botClient.StopReceiving();
            UserRepository.Save();
        }

        private static async void BotOnMessage(object sender, MessageEventArgs e)
        {
            var message = e.Message;
            var userId = message.From.Id;
            var userFirstName = message.From.FirstName;

            if (message.Type != MessageType.Text)
            {
                await _botClient.SendTextMessageAsync(
                    message.Chat,
                    $"–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
                return;
            }

            switch (message.Text)
            {
                case "/start":
                {
                    SendStartMessage(message.Chat, userFirstName);
                    if (!UserRepository.IsUserRegistered(userId))
                    {
                        UserRepository.AddUserById(userId, userFirstName);
                        UserRepository.Save();
                    }
                    else
                    {
                        UserRepository.UpdateUserCondition(userId, userCondition.none);
                        UserRepository.UpdateUserQuestionNumber(userId, 0);
                    }


                    break;
                }
                case "/help":
                    SendHelpMessage(message.Chat);
                    UserRepository.UpdateUserCondition(userId, userCondition.none);
                    UserRepository.UpdateUserQuestionNumber(userId, 0);
                    UserRepository.Save();
                    break;

                case "/random":
                    var rnd = new Random();
                    var rndTobacco = TobaccoRepository.GetItemById(rnd.Next(0, 946));
                    PrintTobaccoToKeyboard(message.Chat, new List<Tobacco> {rndTobacco});
                    break;

                case ButtonSearch:
                    await _botClient.SendTextMessageAsync(
                        message.Chat,
                        $"–ù–∞–ø–∏—à–∏, –∫–∞–∫–æ–π –≤–∫—É—Å —Ç—ã –∏—â–µ—à—å:");

                    UserRepository.UpdateUserCondition(userId, userCondition.search);
                    break;

                case ButtonRecommendations:
                    //UserRepository.UpdateUserCondition(userId, userCondition.recommendation);
                    //UserRepository.UpdateUserQuestionNumber(userId, 0);
                    ///TODO 
                    await _botClient.SendTextMessageAsync(
                        message.Chat,
                        $"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç :c");
                    //    $"–¢–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–∞–±–∞–∫ —Å —Ö–æ–ª–æ–¥–∫–æ–º?");
                    //PrintAnswerOptionsToKeyboard(message.Chat, YesOrNoKeyboard);
                    UserRepository.UpdateUserQuestionNumber(userId, 1);
                    break;

                case ButtonSmokeLater:
                    var user = UserRepository.GetUserById(message.From.Id);
                    var tobaccos = user.SmokeLater.Select(t => TobaccoRepository.GetItemById(t));
                    if (tobaccos.Count() == 0)
                    {
                        await _botClient.SendTextMessageAsync(
                            message.Chat,
                            $"–£ —Ç–µ–±—è –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤ –Ω–∞ –ø–æ–∫—É—Äüò§. \n\n–î–æ–±–∞–≤—å —á—Ç–æ-–Ω–∏–±—É–¥—åüòàüòàüòà");
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(
                            message.Chat,
                            $"–¢—ã —Ö–æ—Ç–µ–ª –ø–æ–∫—É—Ä–∏—Ç—å: ",
                            replyMarkup: new InlineKeyboardMarkup(GetInlineKeyboard(tobaccos.Select(t => t.ToString()),
                                user.SmokeLater, "tobaccoFromRequest")));
                    }

                    break;

                case ButtonHistory:
                    ///TODO
                    await _botClient.SendTextMessageAsync(
                        message.Chat,
                        $"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç :c");
                    break;

                default:
                    switch (UserRepository.GetUserCondition(userId).GetCondition())
                    {
                        case userCondition.none:
                            break;
                        case userCondition.search:
                        {
                            var resultRequest = TobaccoRepository.SearchTobaccoInDict(message.Text.ToLower());
                            if (resultRequest.Count == 0)
                            {
                                await _botClient.SendTextMessageAsync(
                                    message.Chat,
                                    $"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç —Ç–∞–±–∞–∫–∞ —Å —Ç–∞–∫–∏–º –≤–∫—É—Å–æ–º :c");
                            }
                            else
                                PrintTobaccoToKeyboard(message.Chat, resultRequest);

                            break;
                        }

                        case userCondition.recommendation:
                            break;
                    }

                    break;
            }
        }

        static async void SendStartMessage(Chat chat, string userFirstName)
        {
            await _botClient.SendTextMessageAsync(
                chat,
                $"–ü—Ä–∏–≤–µ—Ç {userFirstName},\n" +
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ HookahAdvisor \n" + "\n" +
                "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Ç–∞–±–∞–∫ –¥–ª—è –∫–∞–ª—å—è–Ω–∞ –ø–æ–¥ —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.üí® \n " + "\n" +
                "–ö—É—Ä–µ–Ω–∏–µ –≤—Ä–µ–¥–∏—Ç –í–∞—à–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é! –ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ—Ç –±–æ—Ç, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ–π —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç.üîû\n" +
                "\n" +
                " ¬´–ü–æ–∏—Å–∫üîé¬ª –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Ç–∞–±–∞–∫ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É. \n" + "\n" +
                " ¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚≠êÔ∏è¬ª –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç —Ç–∞–±–∞–∫ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞. \n" + "\n" +
                " ¬´–ü–æ–∫—É—Ä–∏—Ç—å –ø–æ–∑–∂–µüå´¬ª —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç–∞–±–∞–∫–∏. \n" + "\n" +
                " –ñ–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É!üëá", replyMarkup: GetButtons());
        }

        static async void SendHelpMessage(Chat chat)
        {
            await _botClient.SendTextMessageAsync(
                chat,
                $"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Ç–∞–±–∞–∫ –¥–ª—è –∫–∞–ª—å—è–Ω–∞ –ø–æ–¥ —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.\n" + "\n" +
                "–ö—É—Ä–µ–Ω–∏–µ –≤—Ä–µ–¥–∏—Ç –í–∞—à–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é! –ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ—Ç –±–æ—Ç, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ–π —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç.üîû\n" +
                "\n" +
                "¬´–ü–æ–∏—Å–∫üîé¬ª –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Ç–∞–±–∞–∫ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n" + "\n" +
                "¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚≠êÔ∏è¬ª –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç —Ç–∞–±–∞–∫ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞.\n" + "\n" +
                "¬´–ü–æ–∫—É—Ä–∏—Ç—å –ø–æ–∑–∂–µüå´¬ª —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç–∞–±–∞–∫–∏.\n" + "\n" +
                "–ñ–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É!üëá\n");
        }

        public static async void PrintTobaccoToKeyboard(Chat message, List<Tobacco> tobaccos)
        {
            var array = tobaccos.Select(t => t.ToString());
            var idTobaccos = tobaccos.Select(t => t.id);

            var keyboardMarkup = new InlineKeyboardMarkup(GetInlineKeyboard(array, idTobaccos, "tobaccoFromRequest"));
            await _botClient.SendTextMessageAsync(
                message.Id,
                "–°–º–æ—Ç—Ä–∏, —á—Ç–æ —è –Ω–∞—à—ë–ª:",
                replyMarkup: keyboardMarkup
            );
        }

        private static IEnumerable<IEnumerable<InlineKeyboardButton>> GetInlineKeyboard<T>(
            IEnumerable<string> stringArray,
            IEnumerable<T> idTobaccos, string type)
        {
            var keyboardInline = stringArray
                .Zip(idTobaccos, (str, idTobacco) => new[]
                {
                    new InlineKeyboardButton
                    {
                        Text = str,
                        CallbackData = $"{type}_{idTobacco}"
                    }
                });

            return keyboardInline;
        }

        private static IEnumerable<IEnumerable<InlineKeyboardButton>> GetInlineKeyboard<T>(string str, T idTobacco,
            string type)
        {
            return new[]
            {
                new[]
                {
                    new InlineKeyboardButton
                    {
                        Text = str,
                        CallbackData = $"{type}_{idTobacco}"
                    }
                }
            };
        }

        private static IReplyMarkup GetButtons()
        {
            return new ReplyKeyboardMarkup
            {
                Keyboard = new List<List<KeyboardButton>>
                {
                    new() {new KeyboardButton {Text = ButtonSearch}, new KeyboardButton {Text = ButtonRecommendations}},
                    new() {new KeyboardButton {Text = ButtonSmokeLater}, new KeyboardButton {Text = ButtonHistory}}
                },
                ResizeKeyboard = true
            };
        }

        private static async void BotOnCallbackQueryReceived(object sender,
            CallbackQueryEventArgs callbackQueryEventArgs)
        {
            var callbackQuery = callbackQueryEventArgs.CallbackQuery;
            var callbackData = callbackQuery.Data;
            var type = callbackData.Split('_')[0];
            var idTobacco = Convert.ToInt32(callbackData.Split('_')[1]);
            var tobaccoFromTap = TobaccoRepository.GetItemById(idTobacco);
            var user = UserRepository.GetUserById(callbackQuery.From.Id);

            switch (type)
            {
                case "tobaccoFromRequest":
                    var tags = new HashSet<string>();
                    foreach (var t in tobaccoFromTap.categories.Select(t => $"#{t}"))
                    {
                        tags.Add(t);
                    }

                    foreach (var t in tags.Concat(tobaccoFromTap.tastes.Select(t => $"#{t}")))
                    {
                        tags.Add(t);
                    }

                    var result =
                        $"{tobaccoFromTap}\n{string.Join(" ", tags)}\n\n{tobaccoFromTap.description}";
                    if (user.SmokeLater.Contains(idTobacco))
                    {
                        await _botClient.SendTextMessageAsync(callbackQuery.Message.Chat.Id, result,
                            replyMarkup: new InlineKeyboardMarkup(
                                GetInlineKeyboard("–Ø –ø–æ–∫—É—Ä–∏–ª", idTobacco, "unShmokeLater")));
                        await _botClient.AnswerCallbackQueryAsync(
                            callbackQuery.Id,
                            $"{tobaccoFromTap}"
                        );
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(callbackQuery.Message.Chat.Id, result,
                            replyMarkup: new InlineKeyboardMarkup(
                                GetInlineKeyboard("–ü–æ–∫—É—Ä–∏—Ç—å –ø–æ–∑–∂–µ", idTobacco, "shmokeLater")));
                        await _botClient.AnswerCallbackQueryAsync(
                            callbackQuery.Id,
                            $"{tobaccoFromTap}"
                        );
                    }

                    break;
                case "shmokeLater":
                    user.SmokeLater.Add(idTobacco);
                    await _botClient.AnswerCallbackQueryAsync(
                        callbackQuery.Id,
                        $"–ü–æ–∫—É–º–∞—Ä–∏–º {tobaccoFromTap}"
                    );
                    await _botClient.EditMessageTextAsync(callbackQuery.Message.Chat.Id,
                        callbackQuery.Message.MessageId, callbackQuery.Message.Text,
                        replyMarkup: new InlineKeyboardMarkup(
                            GetInlineKeyboard("–Ø –ø–æ–∫—É—Ä–∏–ª", idTobacco, "unShmokeLater")));
                    break;
                case "unShmokeLater":
                    user.SmokeLater.Remove(idTobacco);
                    await _botClient.AnswerCallbackQueryAsync(
                        callbackQuery.Id,
                        $"–ü–æ–∫–∞–ª—é–º–±–∞—Å–∏–ª–∏ {tobaccoFromTap}"
                    );
                    await _botClient.EditMessageTextAsync(callbackQuery.Message.Chat.Id,
                        callbackQuery.Message.MessageId, callbackQuery.Message.Text,
                        replyMarkup: new InlineKeyboardMarkup(
                            GetInlineKeyboard("–ü–æ–∫—É—Ä–∏—Ç—å –ø–æ–∑–∂–µ", idTobacco, "shmokeLater")));
                    break;
            }
        }
    }
}