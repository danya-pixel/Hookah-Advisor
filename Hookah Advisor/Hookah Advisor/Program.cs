using System;
using System.Collections.Generic;
using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;
using System.Threading.Tasks;
using Hookah_Advisor.Repositories;
using Hookah_Advisor.Repository_Interfaces;
using Telegram.Bot.Types.Enums;


namespace Hookah_Advisor
{
    class Program
    {
        static ITelegramBotClient botClient;
        private static UserRepository userRepository = new UserRepository();
        private static TobaccoRepository tobaccoRepository = new TobaccoRepository();
        private const string buttonSearch = "–ü–æ–∏—Å–∫";
        private const string buttonRecomenations = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏";
        private const string buttonHistory = "–ò—Å—Ç–æ—Ä–∏—è";

        static void Main()
        {
            botClient = new TelegramBotClient(BotSettings.Token);

            var me = botClient.GetMeAsync().Result;
            Console.WriteLine(
                $"Hello, World! I am user {me.Id} and my name is {me.FirstName}."
            );

            botClient.OnMessage += Bot_OnMessage;
            botClient.OnCallbackQuery += BotOnCallbackQueryReceived;
            botClient.StartReceiving();

            Console.WriteLine("Press any key to exit");
            Console.ReadKey();

            botClient.StopReceiving();
        }

        static async void Bot_OnMessage(object sender, MessageEventArgs e)
        {
            var message = e.Message;
            var userId = message.From.Id;
            var userFirstName = message.From.FirstName;
            //var tobaccoRepository = new TobaccoRepository();
            var userRepository = new UserRepository();


            if (message.Text == "/start")
            {
                SendStartMessage(message.Chat, userFirstName);
                if (!userRepository.IsUserRegistered(userId))
                {
                    userRepository.AddUserById(userId, userFirstName);
                }
                else
                {
                    userRepository.UpdateUserCondition(userId, userCondition.none);
                    userRepository.UpdateUserQuestionNumber(userId, 0);
                }
            }

            if (message.Text == "/help")
            {
                SendHelpMessage(message.Chat);
                userRepository.UpdateUserCondition(userId, userCondition.none);
                userRepository.UpdateUserQuestionNumber(userId, 0);
            }

            if (userRepository.GetUserCondition(userId).GetCondition() == userCondition.search)
            {
                
                var resultRequest = tobaccoRepository.SearchTobaccoInDict(message.Text);
                PrintArray(message.Chat, TobaccoToString(resultRequest));
                //–≤–∑—è—Ç—å –Ω–æ–≤—ã–π –º–µ—Å–µ–¥–∂ –∏ printArray(—É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ Program, –æ–Ω–∞ –ø–∏—à–µ—Ç –º–∞—Å—Å–∏–≤ –≤ –∏–Ω–ª–∞–π–Ω–∫–∏–±–æ—Ä–¥) –∏–∑ —Ç–∞–±–ª–∏—á–∫–∏ –≤—Å—ë —Å —ç—Ç–∏–º –≤–∫—É—Å–æ–º
            }

            if (message.Text == "–ü–æ–∏—Å–∫")
            {
                botClient.SendTextMessageAsync(
                    chatId: message.Chat,
                    text: $"–ù–∞–ø–∏—à–∏, –∫–∞–∫–æ–π –≤–∫—É—Å —Ç—ã –∏—â–µ—à—å:");

                userRepository.UpdateUserCondition(userId, userCondition.search);
            }

            if (message.Text == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            {
                userRepository.UpdateUserCondition(userId, userCondition.recommendation);
                userRepository.UpdateUserQuestionNumber(userId, 0);
            }
        }

        static async void SendStartMessage(Chat chat, string userFirstName)
        {
            await botClient.SendTextMessageAsync(
                chatId: chat,
                text: $"–ü—Ä–∏–≤–µ—Ç {userFirstName},\n" +
                      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ HookahAdvisor \n" + "\n" +
                      "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Ç–∞–±–∞–∫ –¥–ª—è –∫–∞–ª—å—è–Ω–∞ –ø–æ–¥ —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.üí® \n " + "\n" +
                      "–í–Ω–∏–º–∞–Ω–∏–µ! –î–∞–Ω–Ω—ã–π –±–æ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –ª–∏—Ü–∞–º, –¥–æ—Å—Ç–∏–≥—à–∏–º –≤–æ–∑—Ä–∞—Å—Ç–∞ 18 –ª–µ—Ç.üîû \n" + "\n" +
                      " ¬´–ü–æ–∏—Å–∫üîé¬ª –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Ç–∞–±–∞–∫ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É. \n" + "\n" +
                      " ¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚≠êÔ∏è¬ª –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç —Ç–∞–±–∞–∫ –ø–æ–¥ —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏. \n" + "\n" +
                      " ¬´–ò—Å—Ç–æ—Ä–∏—èüìú¬ª —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ –æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç–∞–±–∞–∫–∏. \n" + "\n" +
                      " –ñ–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É!üëá");

            await botClient.SendTextMessageAsync(
                chatId: chat,
                text: $"–ß—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?");
        }

        static async void SendHelpMessage(Chat chat)
        {
            await botClient.SendTextMessageAsync(
                chatId: chat,
                text: $"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Ç–∞–±–∞–∫ –¥–ª—è –∫–∞–ª—å—è–Ω–∞ –ø–æ–¥ —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.\n" + "\n" +
                      "–í–Ω–∏–º–∞–Ω–∏–µ! –î–∞–Ω–Ω—ã–π –±–æ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –ª–∏—Ü–∞–º, –¥–æ—Å—Ç–∏–≥—à–∏–º –≤–æ–∑—Ä–∞—Å—Ç–∞ 18 –ª–µ—Ç.üîû\n" + "\n" +
                      "¬´–ü–æ–∏—Å–∫üîé¬ª –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Ç–∞–±–∞–∫ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n" + "\n" +
                      "¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚≠êÔ∏è¬ª –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç —Ç–∞–±–∞–∫ –ø–æ–¥ —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏.\n" + "\n" +
                      "¬´–ò—Å—Ç–æ—Ä–∏—èüìú¬ª —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ –æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç–∞–±–∞–∫–∏.\n" + "\n" +
                      "–ñ–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É!üëá\n");
        }

        public static string[] TobaccoToString(List<Tobacco> tobaccos)
        {
            Console.WriteLine("–ø—Ä–µ–æ–±—Ä–∞–∑—É—é –ª–∏—Å—Ç—ã –≤ –º–∞—Å—Å–∏–≤");
            var array = new string[tobaccos.Count];
            Console.WriteLine(tobaccos.Count);
            for (int i = 0; i <= tobaccos.Count; i++)
            {
                array[i] = tobaccos[i].name;
                //Console.WriteLine(array[i]);
            }

            return array;
        }

        public static async void PrintArray(Chat message, string[] array)
        {
            var keyboardMarkup = new InlineKeyboardMarkup(GetInlineKeyboard(array));
            Console.WriteLine("–ø—Ä–µ–æ–±—Ä–∞–∑—É—é –ª–∏—Å—Ç—ã –≤ –º–∞—Å—Å–∏–≤");
            await botClient.SendTextMessageAsync(
                chatId: message.Id,
                text: "–í—ã–±–∏—Ä–∞–π: ",
                replyMarkup: keyboardMarkup
            );
        }

        private static InlineKeyboardButton[][] GetInlineKeyboard(string[] stringArray)
        {
            var keyboardInline = new InlineKeyboardButton[stringArray.Length][];

            for (var i = 0; i < stringArray.Length; i++)
            {
                keyboardInline[i] = new InlineKeyboardButton[]
                {
                    new InlineKeyboardButton
                    {
                        Text = stringArray[i],
                        CallbackData =
                            "Some Callback Data" //—Ö–∑ –ø–æ—á–µ–º—É, –Ω–æ –±–µ–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ—á–∫–∏ –±–æ—Ç –ø–∞–¥–∞–µ—Ç –∏–∑-–∑–∞ —Ç–æ–≥–æ —á—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –ø–∞—Ä—Å–∏—Ç—å idk
                    }
                };
            }

            return keyboardInline;
        }

        static async Task SendInlineKeyboard(Message message)
        {
            await botClient.SendChatActionAsync(message.Chat.Id, ChatAction.Typing);
            await Task.Delay(500);

            // Simulate longer running task

            await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "–≥–æ–≤–Ω–æ",
                replyMarkup: GetButtons()
            );
        }

        private static IReplyMarkup GetButtons()
        {
            return new ReplyKeyboardMarkup
            {
                Keyboard = new List<List<KeyboardButton>>
                {
                    new List<KeyboardButton>
                    {
                        new KeyboardButton {Text = buttonSearch}, new KeyboardButton {Text = buttonRecomenations},
                        new KeyboardButton {Text = buttonHistory}
                    }
                },
                ResizeKeyboard = true
            };
        }

        private static async void BotOnCallbackQueryReceived(object sender,
            CallbackQueryEventArgs callbackQueryEventArgs)
        {
            var callbackQuery = callbackQueryEventArgs.CallbackQuery;
            switch (callbackQuery.Id)
            {
            }

            await botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                text: $"Received {callbackQuery.Data}"
            );

            await botClient.SendTextMessageAsync(
                chatId: callbackQuery.Message.Chat.Id,
                text: $"Received {callbackQuery.Data}"
            );
        }
    }
}