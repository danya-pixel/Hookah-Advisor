using System;
using System.Collections.Generic;
using Hookah_Advisor.Parsers;
using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;
using Hookah_Advisor.Repositories;
using Hookah_Advisor.Repository_Interfaces;


namespace Hookah_Advisor
{
    class Program
    {
        static ITelegramBotClient _botClient;
        private static readonly UserRepository UserRepository = new(new UserParser());
        private static readonly TobaccoRepository TobaccoRepository = new(new TobaccoParser());
        private const string ButtonSearch = "–ü–æ–∏—Å–∫";
        private const string ButtonRecommendations = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏";
        private const string ButtonHistory = "–ò—Å—Ç–æ—Ä–∏—è";
        private static readonly string[] YesOrNoKeyboard = {"–î–∞", "–ù–µ—Ç"};

        static void Main()
        {
            _botClient = new TelegramBotClient(BotSettings.Token);

            var me = _botClient.GetMeAsync().Result;
            Console.WriteLine(
                $"Hello, World! I am user {me.Id} and my name is {me.FirstName}."
            );

            _botClient.OnMessage += BotOnMessage;
            _botClient.OnCallbackQuery += BotOnCallbackQueryReceived;
            _botClient.StartReceiving();

            Console.WriteLine("Press any key to exit");
            Console.ReadKey();

            _botClient.StopReceiving();
        }

        private static async void BotOnMessage(object sender, MessageEventArgs e)
        {
            var message = e.Message;
            var userId = message.From.Id;
            var userFirstName = message.From.FirstName;


            switch (message.Text)
            {
                case "/start":
                {
                    SendStartMessage(message.Chat, userFirstName);
                    if (!UserRepository.IsUserRegistered(userId))
                    {
                        UserRepository.AddUserById(userId, userFirstName);
                    }
                    else
                    {
                        UserRepository.UpdateUserCondition(userId, userCondition.none);
                        UserRepository.UpdateUserQuestionNumber(userId, 0);
                    }

                    break;
                }
                case "/help":
                    SendHelpMessage(message.Chat);
                    UserRepository.UpdateUserCondition(userId, userCondition.none);
                    UserRepository.UpdateUserQuestionNumber(userId, 0);
                    UserRepository.Save();
                    break;

                case "–ü–æ–∏—Å–∫":
                    await _botClient.SendTextMessageAsync(
                        chatId: message.Chat,
                        text: $"–ù–∞–ø–∏—à–∏, –∫–∞–∫–æ–π –≤–∫—É—Å —Ç—ã –∏—â–µ—à—å:");

                    UserRepository.UpdateUserCondition(userId, userCondition.search);
                    break;
                case "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
                    UserRepository.UpdateUserCondition(userId, userCondition.recommendation);
                    UserRepository.UpdateUserQuestionNumber(userId, 0);

                    await _botClient.SendTextMessageAsync(
                        chatId: message.Chat,
                        text: $"–¢–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–∞–±–∞–∫ —Å —Ö–æ–ª–æ–¥–∫–æ–º?");
                    PrintAnswerOptionsToKeyboard(message.Chat, YesOrNoKeyboard);
                    UserRepository.UpdateUserQuestionNumber(userId, 1);
                    break;
                default:
                    switch (UserRepository.GetUserCondition(userId).GetCondition())
                    {
                        case userCondition.none:
                            break;
                        case userCondition.search:
                        {
                            var resultRequest = TobaccoRepository.SearchTobaccoInDict(message.Text.ToLower());
                            if (resultRequest.Count == 0)
                            {
                                await _botClient.SendTextMessageAsync(
                                    chatId: message.Chat,
                                    text: $"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç —Ç–∞–±–∞–∫–∞ —Å —Ç–∞–∫–∏–º –≤–∫—É—Å–æ–º :c");
                            }
                            else PrintTobaccoToKeyboard(message.Chat, resultRequest);

                            break;
                        }

                        case userCondition.recommendation:
                            break;

                        default:
                            break;
                    }
                    break;
            }
        }

        static async void SendStartMessage(Chat chat, string userFirstName)
        {
            await _botClient.SendTextMessageAsync(
                chatId: chat,
                text: $"–ü—Ä–∏–≤–µ—Ç {userFirstName},\n" +
                      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ HookahAdvisor \n" + "\n" +
                      "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Ç–∞–±–∞–∫ –¥–ª—è –∫–∞–ª—å—è–Ω–∞ –ø–æ–¥ —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.üí® \n " + "\n" +
                      "–í–Ω–∏–º–∞–Ω–∏–µ! –î–∞–Ω–Ω—ã–π –±–æ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –ª–∏—Ü–∞–º, –¥–æ—Å—Ç–∏–≥—à–∏–º –≤–æ–∑—Ä–∞—Å—Ç–∞ 18 –ª–µ—Ç.üîû \n" + "\n" +
                      " ¬´–ü–æ–∏—Å–∫üîé¬ª –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Ç–∞–±–∞–∫ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É. \n" + "\n" +
                      " ¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚≠êÔ∏è¬ª –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç —Ç–∞–±–∞–∫ –ø–æ–¥ —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏. \n" + "\n" +
                      " ¬´–ò—Å—Ç–æ—Ä–∏—èüìú¬ª —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ –æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç–∞–±–∞–∫–∏. \n" + "\n" +
                      " –ñ–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É!üëá");

            await _botClient.SendTextMessageAsync(
                chatId: chat,
                text: $"–ß—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?",
                replyMarkup: GetButtons());
        }

        static async void SendHelpMessage(Chat chat)
        {
            await _botClient.SendTextMessageAsync(
                chatId: chat,
                text: $"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Ç–∞–±–∞–∫ –¥–ª—è –∫–∞–ª—å—è–Ω–∞ –ø–æ–¥ —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.\n" + "\n" +
                      "–í–Ω–∏–º–∞–Ω–∏–µ! –î–∞–Ω–Ω—ã–π –±–æ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –ª–∏—Ü–∞–º, –¥–æ—Å—Ç–∏–≥—à–∏–º –≤–æ–∑—Ä–∞—Å—Ç–∞ 18 –ª–µ—Ç.üîû\n" + "\n" +
                      "¬´–ü–æ–∏—Å–∫üîé¬ª –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Ç–∞–±–∞–∫ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n" + "\n" +
                      "¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚≠êÔ∏è¬ª –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç —Ç–∞–±–∞–∫ –ø–æ–¥ —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏.\n" + "\n" +
                      "¬´–ò—Å—Ç–æ—Ä–∏—èüìú¬ª —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ –æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç–∞–±–∞–∫–∏.\n" + "\n" +
                      "–ñ–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É!üëá\n");
        }

        public static string[] TobaccoToString(List<Tobacco> tobaccos)
        {
            Console.WriteLine("–ø—Ä–µ–æ–±—Ä–∞–∑—É—é –ª–∏—Å—Ç—ã –≤ –º–∞—Å—Å–∏–≤");
            var array = new string[tobaccos.Count];
            Console.WriteLine(tobaccos.Count);
            for (var i = 0; i < tobaccos.Count; i++)
            {
                array[i] = tobaccos[i].brand + ": " + tobaccos[i].name;
            }

            return array;
        }

        public static async void PrintTobaccoToKeyboard(Chat message, List<Tobacco> tobaccos)
        {
            var array = TobaccoToString(tobaccos);
            var idTobaccos = new List<int>();

            foreach (var tobacco in tobaccos)
            {
                idTobaccos.Add(tobacco.id);
            }

            var keyboardMarkup = new InlineKeyboardMarkup(GetInlineKeyboardForSearch(array, idTobaccos));
            Console.WriteLine("–ø—Ä–µ–æ–±—Ä–∞–∑—É—é –ª–∏—Å—Ç—ã –≤ –º–∞—Å—Å–∏–≤");
            await _botClient.SendTextMessageAsync(
                chatId: message.Id,
                text: "–í—ã–±–∏—Ä–∞–π: ",
                replyMarkup: keyboardMarkup
            );
        }

        private static InlineKeyboardButton[][] GetInlineKeyboardForSearch(string[] stringArray, List<int> idTobaccos)
        {
            var keyboardInline = new InlineKeyboardButton[stringArray.Length][];

            for (var i = 0; i < stringArray.Length; i++)
            {
                keyboardInline[i] = new InlineKeyboardButton[]
                {
                    new InlineKeyboardButton
                    {
                        Text = stringArray[i],
                        CallbackData =
                            "tobaccoFromRequest_" + idTobaccos[i]
                    }
                };
            }

            return keyboardInline;
        }

        public static async void PrintAnswerOptionsToKeyboard(Chat message, string[] array)
        {
            var keyboardMarkup = new InlineKeyboardMarkup(GetInlineKeyboardForRecomendation(array));
            Console.WriteLine("–ø—Ä–µ–æ–±—Ä–∞–∑—É—é –ª–∏—Å—Ç—ã –≤ –º–∞—Å—Å–∏–≤");
            await _botClient.SendTextMessageAsync(
                chatId: message.Id,
                text: "–í—ã–±–∏—Ä–∞–π: ",
                replyMarkup: keyboardMarkup
            );
        }

        private static InlineKeyboardButton[][] GetInlineKeyboardForRecomendation(string[] stringArray)
        {
            var keyboardInline = new InlineKeyboardButton[stringArray.Length][];

            for (var i = 0; i < stringArray.Length; i++)
            {
                keyboardInline[i] = new InlineKeyboardButton[]
                {
                    new InlineKeyboardButton
                    {
                        Text = stringArray[i],
                        CallbackData =
                            "yesno_" + i
                    }
                };
            }

            return keyboardInline;
        }

        private static IReplyMarkup GetButtons()
        {
            return new ReplyKeyboardMarkup
            {
                Keyboard = new List<List<KeyboardButton>>
                {
                    new List<KeyboardButton>
                    {
                        new KeyboardButton {Text = ButtonSearch}, new KeyboardButton {Text = ButtonRecommendations},
                        new KeyboardButton {Text = ButtonHistory}
                    }
                },
                ResizeKeyboard = true
            };
        }

        private static async void BotOnCallbackQueryReceived(object sender,
            CallbackQueryEventArgs callbackQueryEventArgs)
        {
            var callbackQuery = callbackQueryEventArgs.CallbackQuery;
            var callbackData = callbackQuery.Data;
            var keyboardCondition = callbackData.Split('_')[0];

            if (keyboardCondition == "tobaccoFromRequest")
            {
            }

            if (keyboardCondition == "")
            {
            }

            await _botClient.AnswerCallbackQueryAsync(
                callbackQueryId: callbackQuery.Id,
                text: $"Received {callbackQuery.Data}"
            );

            await _botClient.SendTextMessageAsync(
                chatId: callbackQuery.Message.Chat.Id,
                text: $"Received {callbackQuery.Data}"
            );
        }
    }
}